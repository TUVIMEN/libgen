#!/bin/sh
# by Dominik Stanis≈Çaw Suchora <suchora.dominik7@gmail.com>
# License: GNU GPLv3

sby_def="def"
sby_title="title"
sby_author="author"
sby_series="series"
sby_publisher="publisher"
sby_year="year"
sby_isbn="identifier"
sby_language="language"
sby_md5="md5"
sby_tags="tags"
sby_extension="extension"

by_id="id"
by_title="title"
by_publisher="publisher"
by_year="year"
by_pages="pages"
by_language="language"
by_size="filesize"
by_extension="extension"

SEARCHBY="$sby_def"
PAGE=1
REVERSE="DESC"
SEARCH=""
DOMAIN="https://libgen.st"
DELIM="\t"
RESULTS=25
FORMAT=""
TYPE=0
MASK=1
ORDERBY=""
LANG=""

#C_DOI="32"
C_SIZE="33"
C_EXTENSION="34"
C_AUTHOR="35"
C_TIME="31"
C_PAGES="32"
C_VOLUME="34"
C_LANGUAGE="34"
C_TITLE="39"
COLOR=1

alias ucurl='curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.15.2 Chrome/87.0.4280.144 Safari/537.36" -H "Accept-Encoding: gzip, deflate" --compressed'

while [ $# -gt 0 ]
do
  case "$1" in
    -s|--search-by)
      case "$2" in
        def) SEARCHBY=$sby_def;;
        title) SEARCHBY=$sby_title;;
        author) SEARCHBY=$sby_author;;
        series) SEARCHBY=$sby_series;;
        publisher) SEARCHBY=$sby_publisher;;
        year) SEARCHBY=$sby_year;;
        isbn) SEARCHBY=$sby_isbn;;
        language) SEARCHBY=$sby_language;;
        md5) SEARCHBY=$sby_md5;;
        tags) SEARCHBY=$sby_tags;;
        extension) SEARCHBY=$sby_extension;;
      esac
      shift;;
    -o|--order-by)
      case "$2" in
        id) ORDERBY=$by_id;;
        title) ORDERBY=$by_title;;
        publisher) ORDERBY=$by_publisher;;
        year) ORDERBY=$by_year;;
        pages) ORDERBY=$by_pages;;
        language) ORDERBY=$by_language;;
        size) ORDERBY=$by_size;;
        extension) ORDERBY=$by_extension;;
      esac
      shift;;
    -h|--help)
        NAME="$(basename "$0")"
        printf "%s [OPTION]... [PATTERN]\nSearch for PATTERN in libgen.\nExample: %s -o size -s title -p 1 'industrial society and its future'\n\n" "$NAME" "$NAME"
        printf "Options:\n  -o,  --order-by TYPE\t\tsort using TYPE, that can be: id,title,publisher,year,pages,language,size,extension\n"
        printf "  -d,  --domain DOMAIN\t\tset domain to DOMAIN\n"
        printf "  -D,  --delimiter DELIM\tset delimiter to DELIM\n"
        printf "  -s,  --search-by TYPE\t\tsearch by TYPE, that can be: def,title,author,series,publisher,year,isbn,language,md5,tags,extension\n"
        printf "  -l,  --language LANG\t\tspecify language for results (only for fiction)\n"
        printf "  -r,  --reverse\t\tsort in reverse\n"
        printf "  -f,  --format FORMAT\t\tspecify file format for results\n"
        printf "  -m,  --mask\t\t\tuse wildcards for PATTERN\n"
        printf "  -p,  --page NUM\t\tshow page at NUM\n"
        printf "  -R,  --results NUM\t\tshow NUM results\n"
        printf "  -T,  --non-fiction\t\tsearch non-fiction tab (set by default)\n"
        printf "  -S,  --science\t\tsearch scientific articles tab\n"
        printf "  -F,  --fiction\t\tsearch fiction tab\n"
        printf "  -c,  --color\t\t\tcolor output\n"
        printf "  -C,  --no-color\t\tdisable coloring of output\n"
        printf "  -h,  --help\t\t\tshow help\n"
        printf "\nLink will be copied via xclip.\n"
        exit 0;;
    -r|--reverse)
        REVERSE="ASC";;
    -f|--format)
        FORMAT="$2"
        shift;;
    -l|--language)
        LANG="$2"
        shift;;
    -m|--mask)
        MASK=0;;
    -d|--domain)
        DOMAIN="$2"
        shift;;
    -D|--delimiter)
        DELIM="$2"
        shift;;
    -R|--results)
        RESULTS="$2"
        shift;;
    -p|--page)
        PAGE="$2"
        shift;;
    -T|--non-fiction)
        TYPE=0;;
    -F|--fiction)
        TYPE=1;;
    -S|--science)
        TYPE=2;;
    -c|--color)
        COLOR=1;;
    -C|--no-color)
        COLOR=0;;
    *)
        if [ -z "$SEARCH" ]
        then
          SEARCH="$1"
        else
          SEARCH="$SEARCH $1"
        fi;;
  esac
  shift
done

SEARCHP=$(echo "$SEARCH" | tr ' ' '+')

case $TYPE in
    0)
        t1="$(ucurl -s "$DOMAIN/search.php?req=$SEARCHP&open=0&res=$RESULTS&view=detailed&phrase=$MASK&column=$SEARCHBY&page=$PAGE&sort=$ORDERBY&sortmode=$REVERSE" | tr -d '\r' | hgrep 'table +rules="cols" +width="100%" +border="0"; tr @l[2]')"
        links="$(echo "$t1" | hgrep 'td +colspan="2"' | grep -oE '\?md5=[A-Z0-9]+' | sed 's/^\?md5=/http:\/\/library.lol\/main\//')"
        {
        echo "$t1" | hgrep 'td +colspan="2"; a @p"%i\n"' #title
        echo "$t1" | sed -En '/<td><font color="gray">Pages:<\/font><\/td>/{N;s/.*\n//;s/<td>//;s/<\/td>//;s/<br>.*//;s/.*, //;p}' #pages
        echo "$t1" | sed -E '/<td><font color="gray">Size:<\/font><\/td>/{N; s/[^0-9]+([0-9]+.*) \([0-9]+\).*/Size:\1/}; /^Size:/!d; s/^Size://' #size
        echo "$t1" | sed -E '/<td><font color="gray">Year:<\/font><\/td>/{N; s/[^0-9]+?(([0-9]+)|.*).*/Year:\1/}; /^Year:/!d; s/^Year://' #year
        echo "$t1" | hgrep 'td +colspan="3"; b @p"%i\n"' | sed -E "s/<a href=?(\"|')[^\"']+?(\"|')>//g; s/<\/a>//g; s/, /,/g" #author
        echo "$t1" | sed -E '/<td><font color="gray">Extension:<\/font><\/td>/{N; s/.*>([a-zA-Z0-9]+).*/Extension:\1/}; /^Extension:/!d; s/^Extension://' #extension
        } | recode html..UTF-8 | awk 'function print_fields(lines,fields,step) {
            colors[0] = '"$C_TITLE"'
            colors[1] = '"$C_PAGES"'
            colors[2] = '"$C_SIZE"'
            colors[3] = '"$C_TIME"'
            colors[4] = '"$C_AUTHOR"'
            colors[5] = '"$C_EXTENSION"'
            ORS = ""
            for (i = 0; i < step; i++) {
                for (j = 0; j < fields; j++) {
                    if (j != 0)
                        print "'"$DELIM"'"
                    if ('"$COLOR"')
                        print "\033["colors[j]"m"lines[(step*j)+i]"\033[0m"
                    else
                        print lines[(step*j)+i]
                }
                printf "\n"
            }
        }

        BEGIN { l=0; fields = 6 }
        { lines[l++]=$0 }
        END {
            if (l >= fields)
            if (l%fields == 0) {
                    step = l/fields
                    print_fields(lines,fields,step)
            } else
                print "length of some data fields does not match the others"
        }' | nl;;
    1)
        [ "$SEARCHBY" = "$sby_def" ] && SEARCHBY=""
        [ "$MASK" -eq 1 ] && MASK=0 || MASK=1

        t1="$(ucurl -s "$DOMAIN/fiction/?q=$SEARCHP&criteria=$SEARCHBY&language=$LANG&wildcard=$MASK&format=$FORMAT&page=$PAGE" | hgrep 'tbody; tr')"
        links="$(echo "$t1" | hgrep 'ul +class="record_mirrors_compact" @p"%i\n"' | sed -E 's/^<li><a href="//; s/".*//')"
        {
        echo "$t1" | hgrep 'td; a -title @p"%i\n"' #title
        echo "$t1" | hgrep 'ul +class="catalog_authors" @p"%i\n"' | sed -E "s/\t//g; /^$/d; s/^<li>//g; s/<li>/,/g; s/<\/li>//g; s/<a href=?(\"|')[^\"']+?(\"|') title=?(\"|')[^\"']+?(\"|')>//g; s/<\/a>//g; s/, /,/g" #author
        echo "$t1" | hgrep 'td +title @p"%i\n"' | sed 's/.* //' #size
        echo "$t1" | hgrep 'td +title @p"%i\n"' | sed 's/ .*//; s/[A-Z]/\L&/g;' #extension
        echo "$t1" | hgrep 'td -title @M"<" @p"%i\n"' | sed 'N;s/.*\n//' #language
        } | recode html..UTF-8 | awk 'function print_fields(lines,fields,step) {
            colors[0] = '"$C_TITLE"'
            colors[1] = '"$C_AUTHOR"'
            colors[2] = '"$C_SIZE"'
            colors[3] = '"$C_EXTENSION"'
            colors[4] = '"$C_LANGUAGE"'
            ORS = ""
            for (i = 0; i < step; i++) {
                for (j = 0; j < fields; j++) {
                    if (j != 0)
                        print "'"$DELIM"'"
                    if ('"$COLOR"')
                        print "\033["colors[j]"m"lines[(step*j)+i]"\033[0m"
                    else
                        print lines[(step*j)+i]
                }
                printf "\n"
            }
        }

        BEGIN { l=0; fields = 5 }
        { lines[l++]=$0 }
        END {
            if (l >= fields)
            if (l%fields == 0) {
                    step = l/fields
                    print_fields(lines,fields,step)
            } else
                print "length of some data fields does not match the others"
        }' | nl;;
    2)
        t1="$(ucurl -s "$DOMAIN/scimag/?q=$SEARCHP&page=$PAGE" | sed 's/<p>volume/volume/' | hgrep 'tbody; tr; td @p"%i\n"')"
        links="$(echo "$t1" | hgrep 'ul @p"%i\n"' | sed 's/^<li><a href="//; s/">.*//')"
        {
        echo "$t1" | hgrep 'p; a @p"%i\n"' | sed 'N; s/\n/ - /;' #title
        echo "$t1" | sed -E '/^[^<>]*$/!d' | sed 'N;s/\n.*//' #author
        #echo "$t1" | sed -E '/^[[:space:]]+<p>DOI: [^<>]+<\/p>/!d; s/.*DOI: //; s/<\/p>.*//' #doi
        echo "$t1" | sed '/title="edit metadata">/!d; s/<br>.*//; s/&nbsp;//' #$size
        echo "$t1" | sed '/<\/a>volume.*<\/p>/!d; s/.*volume/volume/; s/<\/p>$//; s/&nbsp;//g' #volume
        } | recode html..UTF-8 | awk 'function print_fields(lines,fields,step) {
            colors[0] = '"$C_TITLE"'
            colors[1] = '"$C_AUTHOR"'
            colors[2] = '"$C_SIZE"'
            colors[3] = '"$C_VOLUME"'
            ORS = ""
            for (i = 0; i < step; i++) {
                for (j = 0; j < fields; j++) {
                    if (j != 0)
                        print "'"$DELIM"'"
                    if ('"$COLOR"')
                        print "\033["colors[j]"m"lines[(step*j)+i]"\033[0m"
                    else
                        print lines[(step*j)+i]
                }
                printf "\n"
            }
        }

        BEGIN { l=0; fields = 4 }
        { lines[l++]=$0 }
        END {
            if (l >= fields)
            if (l%fields == 0) {
                    step = l/fields
                    print_fields(lines,fields,step)
            } else
                print "length of some data fields does not match the others"
        }' | nl;;
esac

[ -z "$links" ] && exit 1
printf 'num> '
read -r NUMBER
link="$(echo "$links" | sed "s/ /%20/g; ${NUMBER}q;d")"
if echo "$link" | grep '://sci-hub' -q
then
    ucurl -g -s "$link" | hgrep 'embed @p"%(src)a\n"' | sed 's/^/https:/' | tee /dev/stderr | tr -d '\n' | xclip -sel clip
else
    ucurl -g -s "$link" | hgrep 'h2; a +href @p"%(href)a\n" @l[1]' | tee /dev/stderr | head -n1 | tr -d '\n' | xclip -sel clip
fi
